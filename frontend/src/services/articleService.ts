import api from './api';

// Types pour les articles
export interface Article {
  id: string;
  title: string;
  content: string;
  summary?: string;
  publishedAt: string;
  categoryName: string;
  categoryId?: string; // ID de la cat√©gorie pour l'√©dition
  slug?: string;
  author?: {
    username: string;
    firstName?: string;
    lastName?: string;
  };
  status?: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED';
  createdAt?: string;
  updatedAt?: string;
}

export interface ArticleListResponse {
  content: Article[];
  totalElements: number;
  totalPages: number;
  size: number;
  number: number;
}

/**
 * R√©cup√®re les articles r√©cents (10 derniers publi√©s)
 * Endpoint public : GET /api/articles/recent
 */
export const getRecentArticles = async (): Promise<Article[]> => {
  try {
    console.log('üì∞ R√©cup√©ration des articles r√©cents...');
    const response = await api.get<Article[]>('/api/articles/recent');
    
    console.log(`‚úÖ ${response.data.length} articles r√©cents r√©cup√©r√©s`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des articles r√©cents:', error);
    throw new Error(
      error.response?.data?.message || 
      'Impossible de r√©cup√©rer les articles r√©cents'
    );
  }
};

/**
 * R√©cup√®re les articles publi√©s avec pagination
 * Endpoint public : GET /api/articles/published
 */
export const getPublishedArticles = async (
  page: number = 0, 
  size: number = 5
): Promise<ArticleListResponse> => {
  try {
    console.log(`üì∞ R√©cup√©ration des articles publi√©s (page ${page}, taille ${size})...`);
    
    const response = await api.get<ArticleListResponse>('/api/articles/published', {
      params: { page, size }
    });
    
    console.log(`‚úÖ Page ${page} r√©cup√©r√©e : ${response.data.content.length} articles`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des articles publi√©s:', error);
    throw new Error(
      error.response?.data?.message || 
      'Impossible de r√©cup√©rer les articles publi√©s'
    );
  }
};

/**
 * R√©cup√®re un article par son ID
 * Endpoint public : GET /api/articles/{id}
 */
export const getArticleById = async (id: string): Promise<Article> => {
  try {
    console.log(`üì∞ R√©cup√©ration de l'article ${id}...`);
    const response = await api.get<Article>(`/api/articles/${id}`);
    
    console.log(`‚úÖ Article "${response.data.title}" r√©cup√©r√©`);
    return response.data;
  } catch (error: any) {
    console.error(`‚ùå Erreur lors de la r√©cup√©ration de l'article ${id}:`, error);
    throw new Error(
      error.response?.data?.message || 
      'Article non trouv√©'
    );
  }
};

/**
 * Utilitaires pour formater les articles
 */
export const formatDate = (dateString: string): string => {
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('fr-FR', {
      day: 'numeric',
      month: 'long', 
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch (error) {
    return 'Date inconnue';
  }
};

export const truncateContent = (content: string, maxLength: number = 150): string => {
  if (content.length <= maxLength) return content;
  return content.substring(0, maxLength).trim() + '...';
};

// ============================================
// CRUD ARTICLES (√âDITEURS/ADMINS)
// ============================================

/**
 * Interface pour cr√©er/modifier un article
 */
export interface ArticleFormData {
  title: string;
  content: string;
  summary?: string;
  categoryId: string;
}

/**
 * Cr√©er un nouveau article (brouillon)
 * Endpoint prot√©g√© : POST /api/articles
 * R√¥les autoris√©s : EDITEUR, ADMINISTRATEUR
 */
export const createArticle = async (articleData: ArticleFormData): Promise<Article> => {
  try {
    console.log('‚úèÔ∏è Cr√©ation d\'un nouvel article...');
    
    const response = await api.post<Article>('/api/articles', articleData);
    
    console.log(`‚úÖ Article "${response.data.title}" cr√©√© avec succ√®s (ID: ${response.data.id})`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'article:', error);
    throw new Error(
      error.response?.data?.message || 
      'Impossible de cr√©er l\'article'
    );
  }
};

/**
 * Helper pour retrouver l'ID d'une cat√©gorie depuis son nom
 * N√©cessaire car le backend exige categoryId pour validation m√™me si non modifiable
 */
const findCategoryIdByName = async (categoryName: string): Promise<string> => {
  try {
    const { getRootCategories, flattenCategories } = await import('./categoryService');
    const rootCategories = await getRootCategories();
    const allCategories = flattenCategories(rootCategories);
    
    const category = allCategories.find(cat => cat.name === categoryName);
    if (!category) {
      throw new Error(`Cat√©gorie non trouv√©e : ${categoryName}`);
    }
    
    return category.id;
  } catch (error) {
    console.error('‚ùå Erreur lors de la recherche de cat√©gorie:', error);
    throw error;
  }
};

/**
 * Modifier un article existant
 * Endpoint prot√©g√© : PUT /api/articles/{id}
 * R√¥les autoris√©s : EDITEUR (ses articles), ADMINISTRATEUR (tous)
 */
export const updateArticle = async (id: string, articleData: ArticleFormData, currentArticle?: Article): Promise<Article> => {
  try {
    console.log(`‚úèÔ∏è Modification de l'article ${id}...`);
    
    // PROBL√àME BACKEND: Validation exige categoryId mais service ne l'utilise pas
    // Solution: Envoyer le categoryId actuel pour satisfaire la validation
    let categoryId = articleData.categoryId;
    
    if (!categoryId && currentArticle?.categoryName) {
      console.log(`üîç R√©cup√©ration de l'ID pour la cat√©gorie "${currentArticle.categoryName}" (validation backend)...`);
      categoryId = await findCategoryIdByName(currentArticle.categoryName);
      console.log(`‚úÖ ID de cat√©gorie trouv√©: ${categoryId}`);
    }
    
    if (!categoryId) {
      throw new Error('Impossible de d√©terminer l\'ID de la cat√©gorie pour validation');
    }
    
    // Payload complet pour satisfaire la validation backend
    // Note: categoryId sera ignor√© par le service mais requis pour validation
    const updatePayload = {
      title: articleData.title,
      content: articleData.content,
      summary: articleData.summary || null,
      categoryId: categoryId // Requis pour validation (mais non modifiable)
    };
    
    console.log('üì¶ Payload envoy√©:', updatePayload);
    console.log('üîç Payload JSON d√©taill√©:', JSON.stringify(updatePayload, null, 2));
    console.log('üéØ Types des champs:', {
      title: typeof updatePayload.title,
      content: typeof updatePayload.content,
      summary: typeof updatePayload.summary,
      categoryId: typeof updatePayload.categoryId,
      titleLength: updatePayload.title?.length,
      contentLength: updatePayload.content?.length
    });
    
    const response = await api.put<Article>(`/api/articles/${id}`, updatePayload);
    
    console.log(`‚úÖ Article "${response.data.title}" modifi√© avec succ√®s`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la modification de l\'article:', error);
    console.error('üìã D√©tails de l\'erreur:', error.response?.data);
    console.error('üö® Status code:', error.response?.status);
    console.error('üö® Status text:', error.response?.statusText);
    console.error('üö® Headers de r√©ponse:', error.response?.headers);
    
    // Log du d√©tail complet de l'erreur backend
    if (error.response?.data) {
      console.error('üî• Erreur backend d√©taill√©e:', JSON.stringify(error.response.data, null, 2));
    }
    
    throw new Error(
      error.response?.data?.message || 
      error.response?.data?.error ||
      `Erreur ${error.response?.status}: ${error.response?.statusText}` ||
      'Impossible de modifier l\'article'
    );
  }
};

/**
 * Publier un article (passer de DRAFT √† PUBLISHED)
 * Endpoint prot√©g√© : POST /api/articles/{id}/publish
 * R√¥les autoris√©s : EDITEUR (ses articles), ADMINISTRATEUR (tous)
 */
export const publishArticle = async (id: string): Promise<Article> => {
  try {
    console.log(`üì¢ Publication de l'article ${id}...`);
    
    const response = await api.post<Article>(`/api/articles/${id}/publish`);
    
    console.log(`‚úÖ Article "${response.data.title}" publi√© avec succ√®s`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la publication de l\'article:', error);
    throw new Error(
      error.response?.data?.message || 
      'Impossible de publier l\'article'
    );
  }
};

/**
 * Archiver un article (passer de PUBLISHED √† ARCHIVED)
 * Endpoint prot√©g√© : POST /api/articles/{id}/archive
 * R√¥les autoris√©s : EDITEUR (ses articles), ADMINISTRATEUR (tous)
 */
export const archiveArticle = async (id: string): Promise<Article> => {
  try {
    console.log(`üì¶ Archivage de l'article ${id}...`);
    
    const response = await api.post<Article>(`/api/articles/${id}/archive`);
    
    console.log(`‚úÖ Article "${response.data.title}" archiv√© avec succ√®s`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erreur lors de l\'archivage de l\'article:', error);
    throw new Error(
      error.response?.data?.message || 
      'Impossible d\'archiver l\'article'
    );
  }
};

/**
 * Supprimer un article d√©finitivement
 * Endpoint prot√©g√© : DELETE /api/articles/{id}
 * R√¥les autoris√©s : ADMINISTRATEUR uniquement
 */
export const deleteArticle = async (id: string): Promise<void> => {
  try {
    console.log(`üóëÔ∏è Suppression de l'article ${id}...`);
    
    await api.delete(`/api/articles/${id}`);
    
    console.log(`‚úÖ Article supprim√© d√©finitivement`);
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la suppression de l\'article:', error);
    throw new Error(
      error.response?.data?.message || 
      'Impossible de supprimer l\'article'
    );
  }
};

/**
 * R√©cup√©rer les articles de l'utilisateur connect√© avec filtres
 * Endpoint prot√©g√© : GET /api/articles/my-articles
 * Inclut les brouillons et articles priv√©s
 */
export const getMyArticles = async (
  status?: 'DRAFT' | 'PUBLISHED' | 'ARCHIVED',
  page: number = 0,
  size: number = 10
): Promise<ArticleListResponse> => {
  try {
    console.log(`üìù R√©cup√©ration de mes articles (statut: ${status || 'tous'})...`);
    
    const params: any = { page, size };
    if (status) params.status = status;
    
    const response = await api.get<ArticleListResponse>('/api/articles/my-articles', { params });
    
    console.log(`‚úÖ ${response.data.content.length} de mes articles r√©cup√©r√©s`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration de mes articles:', error);
    throw new Error(
      error.response?.data?.message || 
      'Impossible de r√©cup√©rer vos articles'
    );
  }
};

/**
 * Utilitaires pour la gestion des articles
 */
export const getStatusBadgeStyle = (status: string) => {
  const styles = {
    DRAFT: { backgroundColor: '#ffc107', color: '#000' },
    PUBLISHED: { backgroundColor: '#28a745', color: '#fff' },
    ARCHIVED: { backgroundColor: '#6c757d', color: '#fff' }
  };
  return styles[status as keyof typeof styles] || { backgroundColor: '#6c757d', color: '#fff' };
};

export const getStatusLabel = (status: string) => {
  const labels = {
    DRAFT: 'üìù Brouillon',
    PUBLISHED: '‚úÖ Publi√©',
    ARCHIVED: 'üì¶ Archiv√©'
  };
  return labels[status as keyof typeof labels] || status;
}; 