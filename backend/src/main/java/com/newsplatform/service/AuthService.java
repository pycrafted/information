package com.newsplatform.service;

import com.newsplatform.dto.request.LoginRequest;
import com.newsplatform.dto.response.AuthResponse;
import com.newsplatform.entity.AuthToken;
import com.newsplatform.entity.RefreshToken;
import com.newsplatform.entity.User;
import com.newsplatform.exception.BusinessException;
import com.newsplatform.exception.ValidationException;
import com.newsplatform.repository.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import jakarta.servlet.http.HttpServletRequest;
import java.util.Optional;
import java.util.UUID;

/**
 * Service d'authentification REST.
 * Couche Service : Logique m√©tier pour l'authentification via API REST
 * G√®re les 3 r√¥les utilisateur selon le cahier des charges : VISITEUR, EDITEUR, ADMINISTRATEUR.
 */
@Service
@Transactional
public class AuthService {

    private static final Logger logger = LoggerFactory.getLogger(AuthService.class);
    private final TokenService tokenService;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    @Autowired
    public AuthService(TokenService tokenService, 
                      UserRepository userRepository,
                      PasswordEncoder passwordEncoder) {
        this.tokenService = tokenService;
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    /**
     * Authentification utilisateur via API REST
     * Logique m√©tier : Validation credentials et g√©n√©ration des jetons JWT
     * 
     * @param loginRequest Donn√©es de connexion
     * @param request Requ√™te HTTP pour IP et User-Agent
     * @return R√©ponse d'authentification avec jetons JWT
     * @throws ValidationException si les param√®tres sont invalides
     * @throws BusinessException si l'authentification √©choue
     */
    public AuthResponse authenticateUser(LoginRequest loginRequest, HttpServletRequest request) {
        try {
            // Validation des param√®tres d'entr√©e
            validateLoginRequest(loginRequest);

            // Recherche de l'utilisateur par nom d'utilisateur ou email
            Optional<User> userOpt = findUserByUsernameOrEmail(loginRequest.getUsername());
            
            if (userOpt.isEmpty()) {
                logger.warn("üîç UTILISATEUR NON TROUV√â - Username: '{}'", loginRequest.getUsername());
                return AuthResponse.failure("Identifiants invalides");
            }

            User user = userOpt.get();
            logger.info("üë§ UTILISATEUR TROUV√â - Username: '{}' - R√¥le: {} - Actif: {}", 
                       user.getUsername(), user.getRole(), user.getActive());

            // V√©rification du mot de passe
            if (!passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {
                logger.warn("üîí MOT DE PASSE INCORRECT - Username: '{}'", loginRequest.getUsername());
                return AuthResponse.failure("Identifiants invalides");
            }

            // V√©rification que l'utilisateur est actif
            if (!user.getActive()) {
                logger.warn("üö´ COMPTE D√âSACTIV√â - Username: '{}' - R√¥le: {}", 
                           user.getUsername(), user.getRole());
                return AuthResponse.failure("Compte utilisateur d√©sactiv√©");
            }

            // Extraction des informations de la requ√™te HTTP
            String clientIp = extractClientIp(request);
            String userAgent = extractUserAgent(request);

            logger.info("üîë G√âN√âRATION DES JETONS - Username: '{}' - R√¥le: {} - IP: {}", 
                       user.getUsername(), user.getRole(), clientIp);

            // G√©n√©ration des jetons JWT
            AuthToken accessToken = tokenService.generateAccessToken(user, clientIp, userAgent);
            RefreshToken refreshToken = tokenService.generateRefreshToken(user, clientIp, userAgent);

            // Mise √† jour de la derni√®re connexion
            user.updateLastLogin();
            userRepository.save(user);

            logger.info("üéâ AUTHENTIFICATION R√âUSSIE - Username: '{}' - R√¥le: {} - IP: {} - Derni√®re connexion: {}", 
                       user.getUsername(), user.getRole(), clientIp, user.getLastLogin());

            // Cr√©ation de la r√©ponse d'authentification
            return AuthResponse.success(
                accessToken.getTokenValue(),
                refreshToken.getTokenValue(),
                accessToken.getExpiresAt(),
                refreshToken.getExpiresAt(),
                user
            );

        } catch (ValidationException e) {
            logger.warn("‚ö†Ô∏è ERREUR DE VALIDATION - Username: '{}' - Erreur: {}", 
                       loginRequest.getUsername(), e.getMessage());
            throw e;
        } catch (Exception e) {
            logger.error("üí• ERREUR SYST√àME - Username: '{}' - Erreur: {}", 
                        loginRequest.getUsername(), e.getMessage(), e);
            throw new BusinessException("Erreur lors de l'authentification", e);
        }
    }

    /**
     * D√©connexion utilisateur
     * R√©voque tous les jetons actifs de l'utilisateur
     * 
     * @param userId ID de l'utilisateur √† d√©connecter
     * @return Message de confirmation
     */
    public AuthResponse logoutUser(String userId) {
        try {
            // Recherche de l'utilisateur par ID
            Optional<User> userOpt = userRepository.findById(UUID.fromString(userId));
            if (userOpt.isEmpty()) {
                logger.warn("üîç UTILISATEUR NON TROUV√â POUR D√âCONNEXION - UserID: {}", userId);
                return AuthResponse.failure("Utilisateur non trouv√©");
            }
            
            User user = userOpt.get();
            logger.info("üö™ D√âCONNEXION UTILISATEUR - Username: '{}' - R√¥le: {} - UserID: {}", 
                       user.getUsername(), user.getRole(), userId);
            
            // R√©vocation de tous les jetons de l'utilisateur
            tokenService.revokeAllUserTokens(user);
            
            logger.info("‚úÖ JETONS R√âVOQU√âS - Username: '{}' - UserID: {}", user.getUsername(), userId);
            
            return new AuthResponse(true, "D√©connexion r√©ussie");
        } catch (Exception e) {
            logger.error("üí• ERREUR D√âCONNEXION - UserID: {} - Erreur: {}", userId, e.getMessage(), e);
            throw new BusinessException("Erreur lors de la d√©connexion", e);
        }
    }

    /**
     * Rafra√Æchissement du jeton d'acc√®s
     * 
     * @param refreshTokenValue Jeton de rafra√Æchissement
     * @param request Requ√™te HTTP pour IP et User-Agent
     * @return Nouveaux jetons d'authentification
     */
    public AuthResponse refreshAccessToken(String refreshTokenValue, HttpServletRequest request) {
        try {
            logger.info("üîÑ VALIDATION REFRESH TOKEN - Token: {}...", 
                       refreshTokenValue.substring(0, Math.min(10, refreshTokenValue.length())));
            
            // Validation du jeton de rafra√Æchissement
            Optional<RefreshToken> refreshTokenOpt = tokenService.validateRefreshToken(refreshTokenValue);
            
            if (refreshTokenOpt.isEmpty()) {
                logger.warn("‚ùå REFRESH TOKEN INVALIDE - Token: {}...", 
                           refreshTokenValue.substring(0, Math.min(10, refreshTokenValue.length())));
                return AuthResponse.failure("Jeton de rafra√Æchissement invalide");
            }

            RefreshToken refreshToken = refreshTokenOpt.get();
            User user = refreshToken.getUser();
            
            logger.info("üë§ UTILISATEUR REFRESH - Username: '{}' - R√¥le: {} - Actif: {}", 
                       user.getUsername(), user.getRole(), user.getActive());
            
            // V√©rification que l'utilisateur est toujours actif
            if (!user.getActive()) {
                logger.warn("üö´ COMPTE D√âSACTIV√â PENDANT REFRESH - Username: '{}'", user.getUsername());
                return AuthResponse.failure("Compte utilisateur d√©sactiv√©");
            }

            // Extraction des informations de la requ√™te HTTP
            String clientIp = extractClientIp(request);
            String userAgent = extractUserAgent(request);

            logger.info("üîë G√âN√âRATION NOUVEAU ACCESS TOKEN - Username: '{}' - IP: {}", 
                       user.getUsername(), clientIp);

            // G√©n√©ration d'un nouveau jeton d'acc√®s
            AuthToken newAccessToken = tokenService.generateAccessToken(user, clientIp, userAgent);

            logger.info("‚úÖ REFRESH TOKEN R√âUSSI - Username: '{}' - R√¥le: {} - IP: {}", 
                       user.getUsername(), user.getRole(), clientIp);

            // Cr√©ation de la r√©ponse avec le nouveau jeton
            return AuthResponse.success(
                newAccessToken.getTokenValue(),
                refreshToken.getTokenValue(), // M√™me refresh token
                newAccessToken.getExpiresAt(),
                refreshToken.getExpiresAt(),
                user
            );

        } catch (Exception e) {
            logger.error("üí• ERREUR REFRESH TOKEN - Erreur: {}", e.getMessage(), e);
            throw new BusinessException("Erreur lors du rafra√Æchissement du jeton", e);
        }
    }

    /**
     * Validation des donn√©es de connexion
     * 
     * @param loginRequest Donn√©es √† valider
     * @throws ValidationException si les donn√©es sont invalides
     */
    private void validateLoginRequest(LoginRequest loginRequest) {
        if (loginRequest == null) {
            throw new ValidationException("Les donn√©es de connexion sont obligatoires");
        }
        
        if (loginRequest.getUsername() == null || loginRequest.getUsername().trim().isEmpty()) {
            throw new ValidationException("Le nom d'utilisateur est obligatoire");
        }
        
        if (loginRequest.getPassword() == null || loginRequest.getPassword().trim().isEmpty()) {
            throw new ValidationException("Le mot de passe est obligatoire");
        }
    }

    /**
     * Recherche d'un utilisateur par nom d'utilisateur ou email
     * 
     * @param usernameOrEmail Nom d'utilisateur ou email
     * @return Utilisateur trouv√© (optionnel)
     */
    private Optional<User> findUserByUsernameOrEmail(String usernameOrEmail) {
        // Recherche d'abord par nom d'utilisateur
        Optional<User> userByUsername = userRepository.findByUsername(usernameOrEmail);
        if (userByUsername.isPresent()) {
            return userByUsername;
        }
        
        // Si pas trouv√©, recherche par email
        return userRepository.findByEmail(usernameOrEmail);
    }

    /**
     * Extraction de l'adresse IP du client
     * 
     * @param request Requ√™te HTTP
     * @return Adresse IP du client
     */
    private String extractClientIp(HttpServletRequest request) {
        String clientIp = request.getHeader("X-Forwarded-For");
        if (clientIp == null || clientIp.isEmpty() || "unknown".equalsIgnoreCase(clientIp)) {
            clientIp = request.getHeader("X-Real-IP");
        }
        if (clientIp == null || clientIp.isEmpty() || "unknown".equalsIgnoreCase(clientIp)) {
            clientIp = request.getRemoteAddr();
        }
        return clientIp;
    }

    /**
     * Extraction du User-Agent
     * 
     * @param request Requ√™te HTTP
     * @return User-Agent du client
     */
    private String extractUserAgent(HttpServletRequest request) {
        return request.getHeader("User-Agent");
    }

    /**
     * Validation d'un jeton d'acc√®s JWT
     * 
     * @param tokenValue Jeton JWT √† valider
     * @return R√©ponse de validation
     */
    public AuthResponse validateToken(String tokenValue) {
        try {
            logger.info("üîç VALIDATION ACCESS TOKEN - Token: {}...", 
                       tokenValue.substring(0, Math.min(10, tokenValue.length())));
            
            // Validation du jeton via le service de tokens
            Optional<AuthToken> tokenOpt = tokenService.validateAccessToken(tokenValue);
            
            if (tokenOpt.isEmpty()) {
                logger.warn("‚ùå ACCESS TOKEN INVALIDE - Token: {}...", 
                           tokenValue.substring(0, Math.min(10, tokenValue.length())));
                return AuthResponse.failure("Jeton invalide ou expir√©");
            }

            AuthToken token = tokenOpt.get();
            User user = token.getUser();
            
            logger.info("üë§ UTILISATEUR TOKEN VALIDE - Username: '{}' - R√¥le: {} - Actif: {}", 
                       user.getUsername(), user.getRole(), user.getActive());
            
            // V√©rification que l'utilisateur est toujours actif
            if (!user.getActive()) {
                logger.warn("üö´ COMPTE D√âSACTIV√â PENDANT VALIDATION - Username: '{}'", user.getUsername());
                return AuthResponse.failure("Compte utilisateur d√©sactiv√©");
            }

            logger.info("‚úÖ TOKEN VALIDE - Username: '{}' - R√¥le: {} - Expire: {}", 
                       user.getUsername(), user.getRole(), token.getExpiresAt());

            // Retourner les informations utilisateur si le jeton est valide
            return AuthResponse.success(
                token.getTokenValue(),
                null, // Pas de refresh token pour la validation
                token.getExpiresAt(),
                null,
                user
            );

        } catch (Exception e) {
            logger.error("üí• ERREUR VALIDATION TOKEN - Erreur: {}", e.getMessage(), e);
            throw new BusinessException("Erreur lors de la validation du jeton", e);
        }
    }
}
