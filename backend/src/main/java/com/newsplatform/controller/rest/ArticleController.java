package com.newsplatform.controller.rest;

import com.newsplatform.dto.request.ArticleRequest;
import com.newsplatform.dto.response.ArticleResponse;
import com.newsplatform.facade.ArticleFacade;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Page;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.Sort;

import java.util.List;
import java.util.UUID;

/**
 * Contr√¥leur REST pour la gestion des articles selon architecture DDD.
 * Couche Pr√©sentation : Gestion HTTP uniquement avec documentation Swagger compl√®te
 * 
 * Responsabilit√©s :
 * - Exposition des endpoints REST pour articles
 * - Validation des param√®tres HTTP
 * - Transformation des r√©ponses HTTP
 * - Documentation API automatique
 * - Gestion des erreurs HTTP
 * 
 * @author √âquipe D√©veloppement
 * @version 2.0 - Documentation Swagger compl√®te
 */
@RestController
@RequestMapping("/api/articles")
@Tag(
    name = "Articles", 
    description = """
        **Gestion des articles de la plateforme d'actualit√©s**
        
        Endpoints pour la consultation et gestion des articles selon les r√¥les utilisateur :
        - **Consultation publique** : Articles publi√©s sans authentification
        - **Gestion √©ditoriale** : CRUD complet pour √©diteurs (authentification requise)
        - **Administration** : Gestion avanc√©e pour administrateurs
        
        **Formats support√©s :** JSON (d√©faut), XML (via header Accept)
        """
)
public class ArticleController {
    
    private static final Logger logger = LoggerFactory.getLogger(ArticleController.class);
    
    private final ArticleFacade articleFacade;
    
    @Autowired
    public ArticleController(ArticleFacade articleFacade) {
        this.articleFacade = articleFacade;
    }
    
    // ===============================================
    // ENDPOINTS PUBLICS (SANS AUTHENTIFICATION)
    // ===============================================
    
    /**
     * R√©cup√®re les 10 derniers articles publi√©s pour la page d'accueil.
     * Endpoint public optimis√© pour les performances.
     */
    @GetMapping("/recent")
    @Operation(
        summary = "R√©cup√®re les derniers articles publi√©s",
        description = """
            **Endpoint public** - R√©cup√®re les 10 derniers articles publi√©s pour l'affichage de la page d'accueil.
            
            ### Caract√©ristiques :
            - ‚úÖ **Public** : Aucune authentification requise
            - ‚ö° **Optimis√©** : Limite fixe de 10 articles pour performances
            - üîí **S√©curis√©** : Seuls les articles publi√©s sont retourn√©s
            - üìä **Tri√©** : Par date de publication d√©croissante
            
            ### Cas d'usage :
            - Page d'accueil du site web
            - Widget "Derniers articles"
            - API publique pour applications mobiles
            """,
        tags = {"Articles", "Public"}
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Liste des derniers articles r√©cup√©r√©e avec succ√®s",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = ArticleResponse.class)
            )
        ),
        @ApiResponse(
            responseCode = "500",
            description = "Erreur serveur interne",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Internal Server Error",
                        "message": "Une erreur technique s'est produite",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        )
    })
    public ResponseEntity<List<ArticleResponse>> getRecentArticles() {
        List<ArticleResponse> recentArticles = articleFacade.getRecentArticles();
        return ResponseEntity.ok(recentArticles);
    }

    /**
     * R√©cup√®re un article sp√©cifique par son identifiant unique.
     * Endpoint public pour consultation d√©taill√©e.
     */
    @GetMapping("/{id}")
    @Operation(
        summary = "R√©cup√®re un article par son ID",
        description = """
            **Endpoint public** - R√©cup√®re les d√©tails complets d'un article sp√©cifique.
            
            ### Caract√©ristiques :
            - ‚úÖ **Public** : Aucune authentification requise
            - üîç **D√©taill√©** : Contenu complet de l'article
            - üîí **S√©curis√©** : Seuls les articles publi√©s sont accessibles
            - üìä **Enrichi** : Inclut cat√©gorie et informations auteur
            
            ### Cas d'usage :
            - Page de d√©tail d'un article
            - Partage d'article via lien direct
            - Int√©gration dans applications tierces
            """,
        tags = {"Articles", "Public"}
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Article trouv√© et retourn√© avec succ√®s",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = ArticleResponse.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Format d'ID invalide",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Bad Request",
                        "message": "Format d'UUID invalide : abc123",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "Article non trouv√© ou non publi√©",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Not Found",
                        "message": "Article non trouv√© avec l'id : 12345678-1234-1234-1234-123456789012",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        )
    })
    public ResponseEntity<ArticleResponse> getArticleById(
        @Parameter(
            description = "Identifiant unique de l'article (UUID)",
            required = true,
            example = "12345678-1234-1234-1234-123456789012",
            schema = @Schema(type = "string", format = "uuid")
        )
        @PathVariable UUID id
    ) {
        logger.info("üîç Requ√™te GET article par ID - ID: {}", id);
        
        ArticleResponse article = articleFacade.getArticleById(id);
        
        logger.debug("‚úÖ Article trouv√© et retourn√© - ID: {}, Titre: '{}'", 
                    id, article.getTitle().substring(0, Math.min(article.getTitle().length(), 50)) + "...");
        
        return ResponseEntity.ok(article);
    }

    /**
     * R√©cup√®re les articles publi√©s avec pagination pour navigation.
     * Endpoint public optimis√© pour grandes collections.
     */
    @GetMapping("/published")
    @Operation(
        summary = "R√©cup√®re les articles publi√©s avec pagination",
        description = """
            **Endpoint public** - R√©cup√®re tous les articles publi√©s avec support de pagination avanc√©e.
            
            ### Caract√©ristiques :
            - ‚úÖ **Public** : Aucune authentification requise
            - üìÑ **Pagin√©** : Support pagination compl√®te (page, size, sort)
            - üîí **S√©curis√©** : Seuls les articles publi√©s sont retourn√©s
            - ‚ö° **Optimis√©** : Requ√™tes avec JOIN FETCH pour performances
            - üìä **Flexible** : Tri personnalisable
            
            ### Param√®tres de pagination :
            - `page` : Num√©ro de page (0-based, d√©faut: 0)
            - `size` : Taille de page (d√©faut: 5, max: 100)
            - `sort` : Crit√®re de tri (d√©faut: publishedAt,desc)
            
            ### Exemples de tri :
            - `publishedAt,desc` : Plus r√©cents en premier
            - `title,asc` : Alphab√©tique par titre
            - `updatedAt,desc` : Derni√®res modifications
            """,
        tags = {"Articles", "Public", "Pagination"}
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Page d'articles r√©cup√©r√©e avec succ√®s",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Page.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Param√®tres de pagination invalides",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Bad Request",
                        "message": "La taille de page ne peut pas d√©passer 100 √©l√©ments",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        )
    })
    public ResponseEntity<Page<ArticleResponse>> getPaginatedPublishedArticles(
        @Parameter(
            description = "Configuration de pagination et tri",
            schema = @Schema(implementation = Pageable.class)
        )
        @PageableDefault(size = 5, sort = "publishedAt", direction = Sort.Direction.DESC)
        Pageable pageable
    ) {
        Page<ArticleResponse> paginatedArticles = articleFacade.getPaginatedPublishedArticles(pageable);
        return ResponseEntity.ok(paginatedArticles);
    }

    /**
     * R√©cup√®re les articles d'une cat√©gorie sp√©cifique avec pagination.
     * Endpoint public pour navigation par cat√©gorie.
     */
    @GetMapping("/category/{categorySlug}")
    @Operation(
        summary = "R√©cup√®re les articles d'une cat√©gorie",
        description = """
            **Endpoint public** - R√©cup√®re tous les articles publi√©s d'une cat√©gorie sp√©cifique.
            
            ### Caract√©ristiques :
            - ‚úÖ **Public** : Aucune authentification requise
            - üìÑ **Pagin√©** : Support pagination compl√®te
            - üè∑Ô∏è **SEO-friendly** : Utilise des slugs au lieu d'IDs
            - üîí **S√©curis√©** : Seuls les articles publi√©s sont retourn√©s
            - üìä **Enrichi** : Inclut informations de la cat√©gorie
            
            ### Navigation :
            - Id√©al pour pages de cat√©gorie
            - Support de la hi√©rarchie de cat√©gories
            - Breadcrumb navigation possible
            
            ### URL Examples :
            - `/api/articles/category/technologie`
            - `/api/articles/category/sport`
            - `/api/articles/category/developpement-web`
            """,
        tags = {"Articles", "Public", "Cat√©gories"}
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Articles de la cat√©gorie r√©cup√©r√©s avec succ√®s",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Page.class)
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "Cat√©gorie non trouv√©e",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Not Found",
                        "message": "Cat√©gorie non trouv√©e avec le slug : technologie-inexistante",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Slug de cat√©gorie invalide",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Bad Request",
                        "message": "Le slug de cat√©gorie ne peut pas √™tre vide",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        )
    })
    public ResponseEntity<Page<ArticleResponse>> getArticlesByCategory(
        @Parameter(
            description = "Slug unique de la cat√©gorie (format SEO-friendly)",
            required = true,
            example = "technologie",
            schema = @Schema(
                type = "string", 
                pattern = "^[a-z0-9-]+$",
                minLength = 1,
                maxLength = 100
            )
        )
        @PathVariable String categorySlug,
        
        @Parameter(
            description = "Configuration de pagination et tri pour les articles de la cat√©gorie",
            schema = @Schema(implementation = Pageable.class)
        )
        @PageableDefault(size = 5, sort = "publishedAt", direction = Sort.Direction.DESC) 
        Pageable pageable
    ) {
        Page<ArticleResponse> page = articleFacade.getPublishedArticlesByCategory(categorySlug, pageable);
        return ResponseEntity.ok(page);
    }

    // ===============================================
    // ENDPOINTS UTILISATEUR CONNECT√â
    // ===============================================
    
    /**
     * R√©cup√®re les articles de l'utilisateur connect√© avec pagination.
     * Endpoint s√©curis√© pour les √©diteurs pour voir leurs propres articles.
     */
    @GetMapping("/my-articles")
    @PreAuthorize("hasRole('EDITOR') or hasRole('ADMIN')")
    @Operation(
        summary = "R√©cup√®re mes articles",
        description = """
            **Endpoint s√©curis√©** - R√©cup√®re tous les articles de l'utilisateur connect√©.
            
            ### Authentification requise :
            - üîê **JWT Bearer Token** obligatoire
            - üë§ **R√¥les autoris√©s** : EDITEUR, ADMINISTRATEUR
            
            ### Caract√©ristiques :
            - üìÑ **Pagin√©** : Support pagination compl√®te
            - üìä **Tous statuts** : DRAFT, PUBLISHED, ARCHIVED
            - üë§ **Personnel** : Seuls vos propres articles
            """,
        tags = {"Articles", "Personnel"},
        security = @SecurityRequirement(name = "BearerAuth")
    )
    public ResponseEntity<Page<ArticleResponse>> getMyArticles(
        @Parameter(
            description = "Configuration de pagination et tri",
            schema = @Schema(implementation = Pageable.class)
        )
        @PageableDefault(size = 10, sort = "updatedAt", direction = Sort.Direction.DESC)
        Pageable pageable
    ) {
        Page<ArticleResponse> myArticles = articleFacade.getMyArticles(pageable);
        return ResponseEntity.ok(myArticles);
    }
    
    /**
     * R√©cup√®re les brouillons de l'utilisateur connect√© avec pagination.
     * Endpoint s√©curis√© pour les √©diteurs pour voir leurs brouillons.
     */
    @GetMapping("/my-drafts")
    @PreAuthorize("hasRole('EDITOR') or hasRole('ADMIN')")
    @Operation(
        summary = "R√©cup√®re mes brouillons",
        description = """
            **Endpoint s√©curis√©** - R√©cup√®re tous les brouillons de l'utilisateur connect√©.
            
            ### Authentification requise :
            - üîê **JWT Bearer Token** obligatoire
            - üë§ **R√¥les autoris√©s** : EDITEUR, ADMINISTRATEUR
            
            ### Caract√©ristiques :
            - üìÑ **Pagin√©** : Support pagination compl√®te
            - üìù **Brouillons uniquement** : Statut DRAFT
            - üë§ **Personnel** : Seuls vos propres brouillons
            """,
        tags = {"Articles", "Personnel"},
        security = @SecurityRequirement(name = "BearerAuth")
    )
    public ResponseEntity<Page<ArticleResponse>> getMyDrafts(
        @Parameter(
            description = "Configuration de pagination et tri",
            schema = @Schema(implementation = Pageable.class)
        )
        @PageableDefault(size = 10, sort = "updatedAt", direction = Sort.Direction.DESC)
        Pageable pageable
    ) {
        Page<ArticleResponse> myDrafts = articleFacade.getMyDrafts(pageable);
        return ResponseEntity.ok(myDrafts);
    }

    // ===============================================
    // ENDPOINTS S√âCURIS√âS (√âDITEURS + ADMINS)
    // ===============================================
    
    /**
     * Cr√©e un nouvel article en brouillon.
     * Endpoint s√©curis√© r√©serv√© aux √©diteurs et administrateurs.
     */
    @PostMapping
    @PreAuthorize("hasRole('EDITOR') or hasRole('ADMIN')")
    @Operation(
        summary = "Cr√©e un nouvel article",
        description = """
            **Endpoint s√©curis√©** - Cr√©e un nouvel article en brouillon.
            
            ### Authentification requise :
            - üîê **JWT Bearer Token** obligatoire
            - üë§ **R√¥les autoris√©s** : EDITEUR, ADMINISTRATEUR
            
            ### Caract√©ristiques :
            - üìù **Brouillon par d√©faut** : Article cr√©√© avec statut DRAFT
            - ‚úÖ **Validation compl√®te** : Titre, contenu, cat√©gorie
            - üè∑Ô∏è **Slug automatique** : G√©n√©r√© √† partir du titre
            - üë§ **Auteur automatique** : Utilisateur connect√©
            
            ### Workflow :
            1. Cr√©ation en brouillon (DRAFT)
            2. Modification possible via PUT
            3. Publication via POST /publish
            4. Archivage via POST /archive
            """,
        tags = {"Articles", "√âditorial", "CRUD"},
        security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "201",
            description = "Article cr√©√© avec succ√®s",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = ArticleResponse.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Donn√©es de cr√©ation invalides",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Bad Request",
                        "message": "Le titre ne peut pas √™tre vide",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        ),
        @ApiResponse(
            responseCode = "401",
            description = "Authentification requise",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Unauthorized",
                        "message": "Token JWT manquant ou invalide",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        ),
        @ApiResponse(
            responseCode = "403",
            description = "Acc√®s interdit - R√¥le insuffisant",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Forbidden",
                        "message": "R√¥le EDITEUR ou ADMINISTRATEUR requis",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        )
    })
    public ResponseEntity<ArticleResponse> createArticle(
        @Parameter(
            description = "Donn√©es de l'article √† cr√©er",
            required = true,
            schema = @Schema(implementation = ArticleRequest.class)
        )
        @Valid @RequestBody ArticleRequest articleRequest
    ) {
        logger.info("üìù Requ√™te POST cr√©ation article - Titre: '{}'", 
                   articleRequest.getTitle() != null ? 
                   articleRequest.getTitle().substring(0, Math.min(articleRequest.getTitle().length(), 50)) + "..." : "null");
        
        ArticleResponse createdArticle = articleFacade.createArticle(articleRequest);
        
        logger.info("‚úÖ Article cr√©√© avec succ√®s - ID: {}, Titre: '{}'", 
                   createdArticle.getId(), 
                   createdArticle.getTitle().substring(0, Math.min(createdArticle.getTitle().length(), 50)) + "...");
        
        return ResponseEntity.status(HttpStatus.CREATED).body(createdArticle);
    }
    
    /**
     * Met √† jour un article existant.
     * Endpoint s√©curis√© avec validation des droits d'auteur.
     */
    @PutMapping("/{id}")
    @PreAuthorize("hasRole('EDITOR') or hasRole('ADMIN')")
    @Operation(
        summary = "Met √† jour un article existant",
        description = """
            **Endpoint s√©curis√©** - Met √† jour un article existant avec validation des droits.
            
            ### Authentification requise :
            - üîê **JWT Bearer Token** obligatoire
            - üë§ **R√¥les autoris√©s** : EDITEUR (propre article), ADMINISTRATEUR (tous)
            
            ### Autorisations :
            - **EDITEUR** : Peut modifier uniquement ses propres articles
            - **ADMINISTRATEUR** : Peut modifier tous les articles
            
            ### Caract√©ristiques :
            - ‚úÖ **Validation compl√®te** : Nouveau titre, contenu, cat√©gorie
            - üè∑Ô∏è **Slug mis √† jour** : Regener√© si titre modifi√©
            - üìä **Statut pr√©serv√©** : Le statut de publication est conserv√©
            - ‚è∞ **Timestamps** : updatedAt automatiquement mis √† jour
            
            ### Restrictions :
            - Articles archiv√©s : modification limit√©e
            - Validation d'unicit√© des slugs
            """,
        tags = {"Articles", "√âditorial", "CRUD"},
        security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Article mis √† jour avec succ√®s",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = ArticleResponse.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Donn√©es de mise √† jour invalides",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Bad Request",
                        "message": "Un article avec ce titre (slug) existe d√©j√†",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        ),
        @ApiResponse(
            responseCode = "403",
            description = "Droits insuffisants sur cet article",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Forbidden",
                        "message": "Vous n'√™tes pas autoris√© √† modifier cet article",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "Article non trouv√©",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Not Found",
                        "message": "Article non trouv√© avec l'ID : 12345678-1234-1234-1234-123456789012",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        )
    })
    public ResponseEntity<ArticleResponse> updateArticle(
        @Parameter(
            description = "Identifiant unique de l'article √† modifier",
            required = true,
            example = "12345678-1234-1234-1234-123456789012",
            schema = @Schema(type = "string", format = "uuid")
        )
        @PathVariable UUID id,
        
        @Parameter(
            description = "Nouvelles donn√©es de l'article",
            required = true,
            schema = @Schema(implementation = ArticleRequest.class)
        )
        @Valid @RequestBody ArticleRequest articleRequest
    ) {
        ArticleResponse updatedArticle = articleFacade.updateArticle(id, articleRequest);
        return ResponseEntity.ok(updatedArticle);
    }
    
    /**
     * Publie un article en brouillon.
     * Endpoint s√©curis√© pour la gestion du workflow √©ditorial.
     */
    @PostMapping("/{id}/publish")
    @PreAuthorize("hasRole('EDITOR') or hasRole('ADMIN')")
    @Operation(
        summary = "Publie un article en brouillon",
        description = """
            **Endpoint s√©curis√©** - Change le statut d'un article de DRAFT √† PUBLISHED.
            
            ### Authentification requise :
            - üîê **JWT Bearer Token** obligatoire
            - üë§ **R√¥les autoris√©s** : EDITEUR (propre article), ADMINISTRATEUR (tous)
            
            ### Workflow de publication :
            1. **Validation** : Article doit √™tre en brouillon (DRAFT)
            2. **V√©rification** : Contenu complet et valide
            3. **Publication** : Statut ‚Üí PUBLISHED + publishedAt ‚Üí maintenant
            4. **Notification** : Article devient visible publiquement
            
            ### Caract√©ristiques :
            - ‚è∞ **Timestamp automatique** : publishedAt d√©fini √† l'instant de publication
            - üåê **Visibilit√© publique** : Article accessible via endpoints publics
            - üîÑ **R√©versible** : Peut √™tre archiv√© ou remis en brouillon
            
            ### Pr√©requis :
            - Article en statut DRAFT uniquement
            - Contenu valid√© et complet
            """,
        tags = {"Articles", "√âditorial", "Workflow"},
        security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Article publi√© avec succ√®s",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = ArticleResponse.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Article ne peut pas √™tre publi√©",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Bad Request",
                        "message": "Seuls les articles en brouillon peuvent √™tre publi√©s",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        ),
        @ApiResponse(
            responseCode = "403",
            description = "Droits insuffisants pour publier",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Forbidden",
                        "message": "Vous n'√™tes pas autoris√© √† publier cet article",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        )
    })
    public ResponseEntity<ArticleResponse> publishArticle(
        @Parameter(
            description = "Identifiant unique de l'article √† publier",
            required = true,
            example = "12345678-1234-1234-1234-123456789012",
            schema = @Schema(type = "string", format = "uuid")
        )
        @PathVariable UUID id
    ) {
        ArticleResponse publishedArticle = articleFacade.publishArticle(id);
        return ResponseEntity.ok(publishedArticle);
    }
    
    /**
     * Archive un article publi√©.
     * Endpoint s√©curis√© pour la gestion du cycle de vie des articles.
     */
    @PostMapping("/{id}/archive")
    @PreAuthorize("hasRole('EDITOR') or hasRole('ADMIN')")
    @Operation(
        summary = "Archive un article publi√©",
        description = """
            **Endpoint s√©curis√©** - Change le statut d'un article de PUBLISHED √† ARCHIVED.
            
            ### Authentification requise :
            - üîê **JWT Bearer Token** obligatoire
            - üë§ **R√¥les autoris√©s** : EDITEUR (propre article), ADMINISTRATEUR (tous)
            
            ### Workflow d'archivage :
            1. **Validation** : Article doit √™tre publi√© (PUBLISHED)
            2. **Archivage** : Statut ‚Üí ARCHIVED
            3. **Retrait** : Article retir√© des endpoints publics
            4. **Conservation** : Donn√©es pr√©serv√©es pour historique
            
            ### Caract√©ristiques :
            - üîí **Invisibilit√© publique** : Plus accessible via endpoints publics
            - üìä **Historique pr√©serv√©** : Donn√©es conserv√©es pour administration
            - üîÑ **R√©versible** : Peut √™tre republi√© si n√©cessaire
            - ‚è∞ **Timestamp** : updatedAt mis √† jour
            
            ### Cas d'usage :
            - Contenu obsol√®te ou p√©rim√©
            - Article temporairement retir√©
            - Maintenance √©ditoriale
            """,
        tags = {"Articles", "√âditorial", "Workflow"},
        security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Article archiv√© avec succ√®s",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = ArticleResponse.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Article ne peut pas √™tre archiv√©",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Bad Request",
                        "message": "Seuls les articles publi√©s peuvent √™tre archiv√©s",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        ),
        @ApiResponse(
            responseCode = "403",
            description = "Droits insuffisants pour archiver",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Forbidden",
                        "message": "Vous n'√™tes pas autoris√© √† archiver cet article",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        )
    })
    public ResponseEntity<ArticleResponse> archiveArticle(
        @Parameter(
            description = "Identifiant unique de l'article √† archiver",
            required = true,
            example = "12345678-1234-1234-1234-123456789012",
            schema = @Schema(type = "string", format = "uuid")
        )
        @PathVariable UUID id
    ) {
        ArticleResponse archivedArticle = articleFacade.archiveArticle(id);
        return ResponseEntity.ok(archivedArticle);
    }
    
    /**
     * Supprime d√©finitivement un article.
     * Endpoint s√©curis√© r√©serv√© aux administrateurs uniquement.
     */
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(
        summary = "Supprime d√©finitivement un article",
        description = """
            **Endpoint ultra-s√©curis√©** - Suppression d√©finitive d'un article.
            
            ### Authentification requise :
            - üîê **JWT Bearer Token** obligatoire
            - üë§ **R√¥le requis** : ADMINISTRATEUR uniquement
            
            ### ‚ö†Ô∏è Attention - Action irr√©versible :
            - üóëÔ∏è **Suppression d√©finitive** : Aucune r√©cup√©ration possible
            - üíæ **Donn√©es perdues** : Contenu, m√©tadonn√©es, historique
            - üîó **Liens bris√©s** : URLs publiques deviennent inaccessibles
            
            ### Recommandations :
            - **Pr√©f√©rer l'archivage** pour la plupart des cas
            - **Utilisez uniquement** pour spam ou contenu ill√©gal
            - **V√©rifiez deux fois** avant suppression
            
            ### Auditabilit√© :
            - Action logg√©e dans les journaux d'audit
            - Notification administrateur
            """,
        tags = {"Articles", "Administration", "Suppression"},
        security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "204",
            description = "Article supprim√© avec succ√®s",
            content = @Content()
        ),
        @ApiResponse(
            responseCode = "403",
            description = "Acc√®s interdit - Administrateur requis",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Forbidden",
                        "message": "R√¥le ADMINISTRATEUR requis pour supprimer un article",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "Article non trouv√©",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(example = """
                    {
                        "error": "Not Found",
                        "message": "Article non trouv√© avec l'ID : 12345678-1234-1234-1234-123456789012",
                        "timestamp": "2024-01-15T10:30:00Z"
                    }
                    """)
            )
        )
    })
    public ResponseEntity<Void> deleteArticle(
        @Parameter(
            description = "Identifiant unique de l'article √† supprimer d√©finitivement",
            required = true,
            example = "12345678-1234-1234-1234-123456789012",
            schema = @Schema(type = "string", format = "uuid")
        )
        @PathVariable UUID id
    ) {
        articleFacade.deleteArticle(id);
        return ResponseEntity.noContent().build();
    }

    /**
     * Gestion centralis√©e des exceptions pour les UUID malform√©s.
     * Assure une r√©ponse coh√©rente pour les erreurs de format.
     */
    @ExceptionHandler(IllegalArgumentException.class)
    @Operation(hidden = true) // Masquer dans la documentation Swagger
    public ResponseEntity<String> handleInvalidUUID(IllegalArgumentException ex) {
        if (ex.getMessage() != null && ex.getMessage().contains("Invalid UUID")) {
            return ResponseEntity.badRequest()
                .body("Format d'UUID invalide : " + ex.getMessage());
        }
        return ResponseEntity.badRequest()
            .body("Param√®tre invalide : " + ex.getMessage());
    }
}
