package com.newsplatform.controller.rest;

import com.newsplatform.dto.request.LoginRequest;
import com.newsplatform.dto.response.AuthResponse;
import com.newsplatform.service.AuthService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * Contr√¥leur REST pour l'authentification.
 * Couche Contr√¥le : Orchestration et validation des requ√™tes d'authentification
 * G√®re l'authentification des 3 r√¥les selon le cahier des charges : VISITEUR, EDITEUR, ADMINISTRATEUR.
 */
@RestController
@RequestMapping("/api/auth")
@Tag(name = "Authentification", description = "API d'authentification JWT pour les 3 r√¥les utilisateur")
public class AuthController {

    private static final Logger logger = LoggerFactory.getLogger(AuthController.class);
    private final AuthService authService;

    @Autowired
    public AuthController(AuthService authService) {
        this.authService = authService;
    }

    /**
     * Authentification utilisateur
     * Endpoint public pour la connexion avec g√©n√©ration de jetons JWT
     * 
     * @param loginRequest Donn√©es de connexion
     * @param request Requ√™te HTTP pour extraction IP/User-Agent
     * @return R√©ponse d'authentification avec jetons JWT
     */
    @PostMapping("/login")
    @Operation(
        summary = "Connexion utilisateur",
        description = """
            **Authentification avec g√©n√©ration de jetons JWT**
            
            Cet endpoint permet l'authentification des utilisateurs selon leurs r√¥les :
            - **VISITEUR** : Lecture des articles publi√©s
            - **EDITEUR** : CRUD Articles + Cat√©gories  
            - **ADMINISTRATEUR** : CRUD Utilisateurs + gestion jetons
            
            **Utilisateurs de test :**
            - `admin` / `OusmaneSonko@2029` - Administrateur complet
            - `editeur` / `OusmaneSonko@2029` - √âditeur articles/cat√©gories
            - `visiteur` / `OusmaneSonko@2029` - Lecture uniquement
            
            **Retourne :**
            - `accessToken` : Jeton d'acc√®s JWT (1h)
            - `refreshToken` : Jeton de rafra√Æchissement (7j)
            - Informations utilisateur avec r√¥le
            """
    )
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "Authentification r√©ussie",
            content = @Content(schema = @Schema(implementation = AuthResponse.class))),
        @ApiResponse(responseCode = "400", description = "Donn√©es invalides"),
        @ApiResponse(responseCode = "401", description = "Identifiants incorrects"),
        @ApiResponse(responseCode = "403", description = "Compte d√©sactiv√©")
    })
    public ResponseEntity<AuthResponse> login(
            @Valid @RequestBody 
            @Parameter(description = "Donn√©es de connexion", required = true)
            LoginRequest loginRequest,
            HttpServletRequest request) {
        
        // Log de la tentative de connexion
        String clientIp = getClientIp(request);
        String userAgent = request.getHeader("User-Agent");
        logger.info("üîê TENTATIVE DE CONNEXION - Utilisateur: '{}' - IP: {} - User-Agent: {}", 
                   loginRequest.getUsername(), clientIp, userAgent);
        
        try {
            AuthResponse response = authService.authenticateUser(loginRequest, request);
            
            if (response.isSuccess()) {
                // Log de connexion r√©ussie
                logger.info("‚úÖ CONNEXION R√âUSSIE - Utilisateur: '{}' - R√¥le: {} - IP: {}", 
                           loginRequest.getUsername(), 
                           response.getUser() != null ? response.getUser().getRole() : "N/A",
                           clientIp);
                return ResponseEntity.ok(response);
            } else {
                // Log d'√©chec de connexion
                logger.warn("‚ùå √âCHEC DE CONNEXION - Utilisateur: '{}' - Raison: {} - IP: {}", 
                           loginRequest.getUsername(), response.getMessage(), clientIp);
                return ResponseEntity.status(401).body(response);
            }
            
        } catch (Exception e) {
            // Log d'erreur syst√®me
            logger.error("üí• ERREUR SYST√àME - Utilisateur: '{}' - Erreur: {} - IP: {}", 
                        loginRequest.getUsername(), e.getMessage(), clientIp);
            return ResponseEntity.status(500).body(
                AuthResponse.failure("Erreur interne du serveur")
            );
        }
    }

    /**
     * D√©connexion utilisateur
     * R√©voque tous les jetons actifs de l'utilisateur
     * 
     * @param userId ID de l'utilisateur √† d√©connecter
     * @return Confirmation de d√©connexion
     */
    @PostMapping("/logout")
    @Operation(
        summary = "D√©connexion utilisateur",
        description = """
            **D√©connexion s√©curis√©e avec r√©vocation des jetons**
            
            R√©voque tous les jetons JWT actifs de l'utilisateur :
            - Access tokens r√©voqu√©s imm√©diatement
            - Refresh tokens invalid√©s
            - S√©curisation contre r√©utilisation malveillante
            
            **Param√®tre :**
            - `userId` : UUID de l'utilisateur (extrait g√©n√©ralement du JWT)
            """
    )
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "D√©connexion r√©ussie"),
        @ApiResponse(responseCode = "400", description = "ID utilisateur invalide"),
        @ApiResponse(responseCode = "404", description = "Utilisateur non trouv√©")
    })
    public ResponseEntity<AuthResponse> logout(
            @RequestParam 
            @Parameter(description = "ID de l'utilisateur", required = true)
            String userId,
            HttpServletRequest request) {
        
        String clientIp = getClientIp(request);
        logger.info("üö™ TENTATIVE DE D√âCONNEXION - UserID: {} - IP: {}", userId, clientIp);
        
        try {
            AuthResponse response = authService.logoutUser(userId);
            
            if (response.isSuccess()) {
                logger.info("‚úÖ D√âCONNEXION R√âUSSIE - UserID: {} - IP: {}", userId, clientIp);
                return ResponseEntity.ok(response);
            } else {
                logger.warn("‚ùå √âCHEC D√âCONNEXION - UserID: {} - Raison: {} - IP: {}", 
                           userId, response.getMessage(), clientIp);
                return ResponseEntity.status(404).body(response);
            }
            
        } catch (Exception e) {
            logger.error("üí• ERREUR D√âCONNEXION - UserID: {} - Erreur: {} - IP: {}", 
                        userId, e.getMessage(), clientIp);
            return ResponseEntity.status(500).body(
                AuthResponse.failure("Erreur lors de la d√©connexion")
            );
        }
    }

    /**
     * Rafra√Æchissement du jeton d'acc√®s
     * G√©n√®re un nouveau jeton d'acc√®s √† partir d'un refresh token valide
     * 
     * @param refreshToken Jeton de rafra√Æchissement
     * @param request Requ√™te HTTP pour extraction IP/User-Agent
     * @return Nouveau jeton d'acc√®s
     */
    @PostMapping("/refresh")
    @Operation(
        summary = "Rafra√Æchissement du jeton d'acc√®s",
        description = """
            **Renouvellement s√©curis√© des jetons JWT**
            
            Permet de renouveler l'acc√®s sans nouvelle authentification :
            - Valide le refresh token (non expir√©, non r√©voqu√©)
            - G√©n√®re un nouveau access token (1h)
            - Maintient le m√™me refresh token
            - V√©rifie que l'utilisateur est toujours actif
            
            **S√©curit√© :**
            - Limite d'utilisation du refresh token
            - Tracking des adresses IP et User-Agent
            - Auto-r√©vocation si comportement suspect
            """
    )
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "Jeton renouvel√© avec succ√®s"),
        @ApiResponse(responseCode = "401", description = "Refresh token invalide ou expir√©"),
        @ApiResponse(responseCode = "403", description = "Compte utilisateur d√©sactiv√©")
    })
    public ResponseEntity<AuthResponse> refreshToken(
            @RequestParam 
            @Parameter(description = "Jeton de rafra√Æchissement", required = true)
            String refreshToken,
            HttpServletRequest request) {
        
        String clientIp = getClientIp(request);
        logger.info("üîÑ TENTATIVE REFRESH TOKEN - IP: {} - Token: {}...", 
                   clientIp, refreshToken.substring(0, Math.min(10, refreshToken.length())));
        
        try {
            AuthResponse response = authService.refreshAccessToken(refreshToken, request);
            
            if (response.isSuccess()) {
                logger.info("‚úÖ REFRESH TOKEN R√âUSSI - IP: {}", clientIp);
                return ResponseEntity.ok(response);
            } else {
                logger.warn("‚ùå √âCHEC REFRESH TOKEN - Raison: {} - IP: {}", 
                           response.getMessage(), clientIp);
                return ResponseEntity.status(401).body(response);
            }
            
        } catch (Exception e) {
            logger.error("üí• ERREUR REFRESH TOKEN - Erreur: {} - IP: {}", 
                        e.getMessage(), clientIp);
            return ResponseEntity.status(500).body(
                AuthResponse.failure("Erreur lors du rafra√Æchissement")
            );
        }
    }

    /**
     * V√©rification de validit√© d'un jeton
     * Endpoint utilitaire pour valider un jeton JWT c√¥t√© client
     * 
     * @param token Jeton JWT √† valider
     * @return Statut de validit√© du jeton
     */
    @GetMapping("/validate")
    @Operation(
        summary = "Validation d'un jeton JWT",
        description = """
            **V√©rification de validit√© d'un jeton d'acc√®s**
            
            Endpoint utilitaire pour les applications clientes :
            - V√©rifie la signature JWT
            - Contr√¥le l'expiration
            - Valide le statut en base de donn√©es
            - Retourne les informations utilisateur si valide
            
            **Utilisation :**
            - Validation c√¥t√© frontend avant requ√™tes sensibles
            - V√©rification p√©riodique de la session
            - D√©connexion automatique si jeton invalide
            """
    )
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "Jeton valide"),
        @ApiResponse(responseCode = "401", description = "Jeton invalide ou expir√©")
    })
    public ResponseEntity<AuthResponse> validateToken(
            @RequestParam 
            @Parameter(description = "Jeton JWT √† valider", required = true)
            String token,
            HttpServletRequest request) {
        
        String clientIp = getClientIp(request);
        logger.info("üîç VALIDATION TOKEN - IP: {} - Token: {}...", 
                   clientIp, token.substring(0, Math.min(10, token.length())));
        
        try {
            AuthResponse response = authService.validateToken(token);
            
            if (response.isSuccess()) {
                logger.info("‚úÖ TOKEN VALIDE - IP: {}", clientIp);
                return ResponseEntity.ok(response);
            } else {
                logger.warn("‚ùå TOKEN INVALIDE - Raison: {} - IP: {}", 
                           response.getMessage(), clientIp);
                return ResponseEntity.status(401).body(response);
            }
            
        } catch (Exception e) {
            logger.error("üí• ERREUR VALIDATION TOKEN - Erreur: {} - IP: {}", 
                        e.getMessage(), clientIp);
            return ResponseEntity.status(500).body(
                AuthResponse.failure("Erreur lors de la validation")
            );
        }
    }

    /**
     * Extraction de l'adresse IP du client
     */
    private String getClientIp(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty() && !"unknown".equalsIgnoreCase(xForwardedFor)) {
            return xForwardedFor.split(",")[0];
        }
        
        String xRealIp = request.getHeader("X-Real-IP");
        if (xRealIp != null && !xRealIp.isEmpty() && !"unknown".equalsIgnoreCase(xRealIp)) {
            return xRealIp;
        }
        
        return request.getRemoteAddr();
    }
}
