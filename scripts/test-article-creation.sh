#!/bin/bash

# Script de test pour la cr√©ation d'articles
# V√©rifie que l'authentification et la cr√©ation d'articles fonctionnent

echo "üß™ Test de cr√©ation d'articles"
echo "==============================="

# Attendre que le backend soit pr√™t
echo "‚è≥ Attente du d√©marrage du backend..."
sleep 5

# URL de base
BASE_URL="http://localhost:8080/api"

# Test 1: V√©rifier que le backend r√©pond
echo ""
echo "üîç Test 1: V√©rification du backend"
echo "----------------------------------"
BACKEND_RESPONSE=$(curl -s -X GET "$BASE_URL/articles/recent")
if [ $? -eq 0 ]; then
    echo "‚úÖ Backend accessible"
else
    echo "‚ùå Backend inaccessible"
    exit 1
fi

# Test 2: Connexion admin
echo ""
echo "üîê Test 2: Connexion admin"
echo "--------------------------"
LOGIN_RESPONSE=$(curl -s -X POST "$BASE_URL/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "username": "admin",
    "password": "OusmaneSonko@2029"
  }')

echo "R√©ponse de connexion: $LOGIN_RESPONSE"

# Extraire le token d'acc√®s
ACCESS_TOKEN=$(echo $LOGIN_RESPONSE | grep -o '"accessToken":"[^"]*"' | cut -d'"' -f4)

if [ -z "$ACCESS_TOKEN" ]; then
    echo "‚ùå √âchec de la connexion - Token non trouv√©"
    exit 1
fi

echo "‚úÖ Connexion r√©ussie - Token: ${ACCESS_TOKEN:0:20}..."

# Test 3: Cr√©ation d'un article
echo ""
echo "üìù Test 3: Cr√©ation d'un article"
echo "--------------------------------"
ARTICLE_DATA='{
  "title": "Article de test cr√©√© via script",
  "content": "Ceci est un article de test cr√©√© automatiquement pour v√©rifier le bon fonctionnement de l\'API.",
  "summary": "R√©sum√© de l\'article de test",
  "slug": "article-test-script",
  "status": "DRAFT",
  "categoryId": 1
}'

CREATE_RESPONSE=$(curl -s -X POST "$BASE_URL/articles" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -d "$ARTICLE_DATA")

echo "R√©ponse de cr√©ation: $CREATE_RESPONSE"

# V√©rifier si l'article a √©t√© cr√©√©
if echo "$CREATE_RESPONSE" | grep -q '"id"'; then
    echo "‚úÖ Article cr√©√© avec succ√®s"
    
    # Extraire l'ID de l'article
    ARTICLE_ID=$(echo $CREATE_RESPONSE | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
    echo "üìÑ ID de l'article: $ARTICLE_ID"
    
    # Test 4: R√©cup√©ration de l'article cr√©√©
    echo ""
    echo "üîç Test 4: R√©cup√©ration de l'article cr√©√©"
    echo "----------------------------------------"
    GET_RESPONSE=$(curl -s -X GET "$BASE_URL/articles/$ARTICLE_ID" \
      -H "Authorization: Bearer $ACCESS_TOKEN")
    
    echo "R√©ponse de r√©cup√©ration: $GET_RESPONSE"
    
    if echo "$GET_RESPONSE" | grep -q '"title"'; then
        echo "‚úÖ Article r√©cup√©r√© avec succ√®s"
    else
        echo "‚ùå √âchec de la r√©cup√©ration de l'article"
    fi
    
else
    echo "‚ùå √âchec de la cr√©ation de l'article"
    echo "D√©tails de l'erreur: $CREATE_RESPONSE"
    exit 1
fi

# Test 5: Publication de l'article
echo ""
echo "üì¢ Test 5: Publication de l'article"
echo "----------------------------------"
PUBLISH_RESPONSE=$(curl -s -X POST "$BASE_URL/articles/$ARTICLE_ID/publish" \
  -H "Authorization: Bearer $ACCESS_TOKEN")

echo "R√©ponse de publication: $PUBLISH_RESPONSE"

if echo "$PUBLISH_RESPONSE" | grep -q '"status":"PUBLISHED"'; then
    echo "‚úÖ Article publi√© avec succ√®s"
else
    echo "‚ùå √âchec de la publication de l'article"
fi

# Test 6: V√©rification que l'article appara√Æt dans les articles r√©cents
echo ""
echo "üì∞ Test 6: V√©rification dans les articles r√©cents"
echo "------------------------------------------------"
RECENT_RESPONSE=$(curl -s -X GET "$BASE_URL/articles/recent")

if echo "$RECENT_RESPONSE" | grep -q "Article de test cr√©√© via script"; then
    echo "‚úÖ Article trouv√© dans les articles r√©cents"
else
    echo "‚ö†Ô∏è Article non trouv√© dans les articles r√©cents (normal s'il est en DRAFT)"
fi

echo ""
echo "üéâ Tests termin√©s avec succ√®s !"
echo "===============================" 